/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.usc.pgroup.floe.thriftgen;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TPellet implements org.apache.thrift.TBase<TPellet, TPellet._Fields>, java.io.Serializable, Cloneable, Comparable<TPellet> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPellet");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField INCOMING_EDGES_FIELD_DESC = new org.apache.thrift.protocol.TField("incomingEdges", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField OUTGOING_EDGES_FIELD_DESC = new org.apache.thrift.protocol.TField("outgoingEdges", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField SERIALIZED_PELLET_FIELD_DESC = new org.apache.thrift.protocol.TField("serializedPellet", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TPelletStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TPelletTupleSchemeFactory());
  }

  private String id; // required
  private List<TEdge> incomingEdges; // required
  private List<TEdge> outgoingEdges; // required
  private ByteBuffer serializedPellet; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    INCOMING_EDGES((short)2, "incomingEdges"),
    OUTGOING_EDGES((short)3, "outgoingEdges"),
    SERIALIZED_PELLET((short)4, "serializedPellet");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // INCOMING_EDGES
          return INCOMING_EDGES;
        case 3: // OUTGOING_EDGES
          return OUTGOING_EDGES;
        case 4: // SERIALIZED_PELLET
          return SERIALIZED_PELLET;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INCOMING_EDGES, new org.apache.thrift.meta_data.FieldMetaData("incomingEdges", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TEdge.class))));
    tmpMap.put(_Fields.OUTGOING_EDGES, new org.apache.thrift.meta_data.FieldMetaData("outgoingEdges", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TEdge.class))));
    tmpMap.put(_Fields.SERIALIZED_PELLET, new org.apache.thrift.meta_data.FieldMetaData("serializedPellet", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPellet.class, metaDataMap);
  }

  public TPellet() {
  }

  public TPellet(
    String id,
    List<TEdge> incomingEdges,
    List<TEdge> outgoingEdges,
    ByteBuffer serializedPellet)
  {
    this();
    this.id = id;
    this.incomingEdges = incomingEdges;
    this.outgoingEdges = outgoingEdges;
    this.serializedPellet = serializedPellet;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPellet(TPellet other) {
    if (other.is_set_id()) {
      this.id = other.id;
    }
    if (other.is_set_incomingEdges()) {
      List<TEdge> __this__incomingEdges = new ArrayList<TEdge>(other.incomingEdges.size());
      for (TEdge other_element : other.incomingEdges) {
        __this__incomingEdges.add(new TEdge(other_element));
      }
      this.incomingEdges = __this__incomingEdges;
    }
    if (other.is_set_outgoingEdges()) {
      List<TEdge> __this__outgoingEdges = new ArrayList<TEdge>(other.outgoingEdges.size());
      for (TEdge other_element : other.outgoingEdges) {
        __this__outgoingEdges.add(new TEdge(other_element));
      }
      this.outgoingEdges = __this__outgoingEdges;
    }
    if (other.is_set_serializedPellet()) {
      this.serializedPellet = org.apache.thrift.TBaseHelper.copyBinary(other.serializedPellet);
;
    }
  }

  public TPellet deepCopy() {
    return new TPellet(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.incomingEdges = null;
    this.outgoingEdges = null;
    this.serializedPellet = null;
  }

  public String get_id() {
    return this.id;
  }

  public void set_id(String id) {
    this.id = id;
  }

  public void unset_id() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean is_set_id() {
    return this.id != null;
  }

  public void set_id_isSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public int get_incomingEdges_size() {
    return (this.incomingEdges == null) ? 0 : this.incomingEdges.size();
  }

  public java.util.Iterator<TEdge> get_incomingEdges_iterator() {
    return (this.incomingEdges == null) ? null : this.incomingEdges.iterator();
  }

  public void add_to_incomingEdges(TEdge elem) {
    if (this.incomingEdges == null) {
      this.incomingEdges = new ArrayList<TEdge>();
    }
    this.incomingEdges.add(elem);
  }

  public List<TEdge> get_incomingEdges() {
    return this.incomingEdges;
  }

  public void set_incomingEdges(List<TEdge> incomingEdges) {
    this.incomingEdges = incomingEdges;
  }

  public void unset_incomingEdges() {
    this.incomingEdges = null;
  }

  /** Returns true if field incomingEdges is set (has been assigned a value) and false otherwise */
  public boolean is_set_incomingEdges() {
    return this.incomingEdges != null;
  }

  public void set_incomingEdges_isSet(boolean value) {
    if (!value) {
      this.incomingEdges = null;
    }
  }

  public int get_outgoingEdges_size() {
    return (this.outgoingEdges == null) ? 0 : this.outgoingEdges.size();
  }

  public java.util.Iterator<TEdge> get_outgoingEdges_iterator() {
    return (this.outgoingEdges == null) ? null : this.outgoingEdges.iterator();
  }

  public void add_to_outgoingEdges(TEdge elem) {
    if (this.outgoingEdges == null) {
      this.outgoingEdges = new ArrayList<TEdge>();
    }
    this.outgoingEdges.add(elem);
  }

  public List<TEdge> get_outgoingEdges() {
    return this.outgoingEdges;
  }

  public void set_outgoingEdges(List<TEdge> outgoingEdges) {
    this.outgoingEdges = outgoingEdges;
  }

  public void unset_outgoingEdges() {
    this.outgoingEdges = null;
  }

  /** Returns true if field outgoingEdges is set (has been assigned a value) and false otherwise */
  public boolean is_set_outgoingEdges() {
    return this.outgoingEdges != null;
  }

  public void set_outgoingEdges_isSet(boolean value) {
    if (!value) {
      this.outgoingEdges = null;
    }
  }

  public byte[] get_serializedPellet() {
    set_serializedPellet(org.apache.thrift.TBaseHelper.rightSize(serializedPellet));
    return serializedPellet == null ? null : serializedPellet.array();
  }

  public ByteBuffer buffer_for_serializedPellet() {
    return serializedPellet;
  }

  public void set_serializedPellet(byte[] serializedPellet) {
    set_serializedPellet(serializedPellet == null ? (ByteBuffer)null : ByteBuffer.wrap(serializedPellet));
  }

  public void set_serializedPellet(ByteBuffer serializedPellet) {
    this.serializedPellet = serializedPellet;
  }

  public void unset_serializedPellet() {
    this.serializedPellet = null;
  }

  /** Returns true if field serializedPellet is set (has been assigned a value) and false otherwise */
  public boolean is_set_serializedPellet() {
    return this.serializedPellet != null;
  }

  public void set_serializedPellet_isSet(boolean value) {
    if (!value) {
      this.serializedPellet = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unset_id();
      } else {
        set_id((String)value);
      }
      break;

    case INCOMING_EDGES:
      if (value == null) {
        unset_incomingEdges();
      } else {
        set_incomingEdges((List<TEdge>)value);
      }
      break;

    case OUTGOING_EDGES:
      if (value == null) {
        unset_outgoingEdges();
      } else {
        set_outgoingEdges((List<TEdge>)value);
      }
      break;

    case SERIALIZED_PELLET:
      if (value == null) {
        unset_serializedPellet();
      } else {
        set_serializedPellet((ByteBuffer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return get_id();

    case INCOMING_EDGES:
      return get_incomingEdges();

    case OUTGOING_EDGES:
      return get_outgoingEdges();

    case SERIALIZED_PELLET:
      return get_serializedPellet();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return is_set_id();
    case INCOMING_EDGES:
      return is_set_incomingEdges();
    case OUTGOING_EDGES:
      return is_set_outgoingEdges();
    case SERIALIZED_PELLET:
      return is_set_serializedPellet();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TPellet)
      return this.equals((TPellet)that);
    return false;
  }

  public boolean equals(TPellet that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.is_set_id();
    boolean that_present_id = true && that.is_set_id();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_incomingEdges = true && this.is_set_incomingEdges();
    boolean that_present_incomingEdges = true && that.is_set_incomingEdges();
    if (this_present_incomingEdges || that_present_incomingEdges) {
      if (!(this_present_incomingEdges && that_present_incomingEdges))
        return false;
      if (!this.incomingEdges.equals(that.incomingEdges))
        return false;
    }

    boolean this_present_outgoingEdges = true && this.is_set_outgoingEdges();
    boolean that_present_outgoingEdges = true && that.is_set_outgoingEdges();
    if (this_present_outgoingEdges || that_present_outgoingEdges) {
      if (!(this_present_outgoingEdges && that_present_outgoingEdges))
        return false;
      if (!this.outgoingEdges.equals(that.outgoingEdges))
        return false;
    }

    boolean this_present_serializedPellet = true && this.is_set_serializedPellet();
    boolean that_present_serializedPellet = true && that.is_set_serializedPellet();
    if (this_present_serializedPellet || that_present_serializedPellet) {
      if (!(this_present_serializedPellet && that_present_serializedPellet))
        return false;
      if (!this.serializedPellet.equals(that.serializedPellet))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_id = true && (is_set_id());
    builder.append(present_id);
    if (present_id)
      builder.append(id);

    boolean present_incomingEdges = true && (is_set_incomingEdges());
    builder.append(present_incomingEdges);
    if (present_incomingEdges)
      builder.append(incomingEdges);

    boolean present_outgoingEdges = true && (is_set_outgoingEdges());
    builder.append(present_outgoingEdges);
    if (present_outgoingEdges)
      builder.append(outgoingEdges);

    boolean present_serializedPellet = true && (is_set_serializedPellet());
    builder.append(present_serializedPellet);
    if (present_serializedPellet)
      builder.append(serializedPellet);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(TPellet other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(is_set_id()).compareTo(other.is_set_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_incomingEdges()).compareTo(other.is_set_incomingEdges());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_incomingEdges()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.incomingEdges, other.incomingEdges);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_outgoingEdges()).compareTo(other.is_set_outgoingEdges());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_outgoingEdges()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outgoingEdges, other.outgoingEdges);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_serializedPellet()).compareTo(other.is_set_serializedPellet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_serializedPellet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serializedPellet, other.serializedPellet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TPellet(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("incomingEdges:");
    if (this.incomingEdges == null) {
      sb.append("null");
    } else {
      sb.append(this.incomingEdges);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("outgoingEdges:");
    if (this.outgoingEdges == null) {
      sb.append("null");
    } else {
      sb.append(this.outgoingEdges);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("serializedPellet:");
    if (this.serializedPellet == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.serializedPellet, sb);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!is_set_id()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' is unset! Struct:" + toString());
    }

    if (!is_set_incomingEdges()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'incomingEdges' is unset! Struct:" + toString());
    }

    if (!is_set_outgoingEdges()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'outgoingEdges' is unset! Struct:" + toString());
    }

    if (!is_set_serializedPellet()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'serializedPellet' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPelletStandardSchemeFactory implements SchemeFactory {
    public TPelletStandardScheme getScheme() {
      return new TPelletStandardScheme();
    }
  }

  private static class TPelletStandardScheme extends StandardScheme<TPellet> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TPellet struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.set_id_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INCOMING_EDGES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.incomingEdges = new ArrayList<TEdge>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  TEdge _elem2;
                  _elem2 = new TEdge();
                  _elem2.read(iprot);
                  struct.incomingEdges.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.set_incomingEdges_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OUTGOING_EDGES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.outgoingEdges = new ArrayList<TEdge>(_list3.size);
                for (int _i4 = 0; _i4 < _list3.size; ++_i4)
                {
                  TEdge _elem5;
                  _elem5 = new TEdge();
                  _elem5.read(iprot);
                  struct.outgoingEdges.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.set_outgoingEdges_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SERIALIZED_PELLET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serializedPellet = iprot.readBinary();
              struct.set_serializedPellet_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TPellet struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.incomingEdges != null) {
        oprot.writeFieldBegin(INCOMING_EDGES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.incomingEdges.size()));
          for (TEdge _iter6 : struct.incomingEdges)
          {
            _iter6.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.outgoingEdges != null) {
        oprot.writeFieldBegin(OUTGOING_EDGES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.outgoingEdges.size()));
          for (TEdge _iter7 : struct.outgoingEdges)
          {
            _iter7.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.serializedPellet != null) {
        oprot.writeFieldBegin(SERIALIZED_PELLET_FIELD_DESC);
        oprot.writeBinary(struct.serializedPellet);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPelletTupleSchemeFactory implements SchemeFactory {
    public TPelletTupleScheme getScheme() {
      return new TPelletTupleScheme();
    }
  }

  private static class TPelletTupleScheme extends TupleScheme<TPellet> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPellet struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.id);
      {
        oprot.writeI32(struct.incomingEdges.size());
        for (TEdge _iter8 : struct.incomingEdges)
        {
          _iter8.write(oprot);
        }
      }
      {
        oprot.writeI32(struct.outgoingEdges.size());
        for (TEdge _iter9 : struct.outgoingEdges)
        {
          _iter9.write(oprot);
        }
      }
      oprot.writeBinary(struct.serializedPellet);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPellet struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.id = iprot.readString();
      struct.set_id_isSet(true);
      {
        org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.incomingEdges = new ArrayList<TEdge>(_list10.size);
        for (int _i11 = 0; _i11 < _list10.size; ++_i11)
        {
          TEdge _elem12;
          _elem12 = new TEdge();
          _elem12.read(iprot);
          struct.incomingEdges.add(_elem12);
        }
      }
      struct.set_incomingEdges_isSet(true);
      {
        org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.outgoingEdges = new ArrayList<TEdge>(_list13.size);
        for (int _i14 = 0; _i14 < _list13.size; ++_i14)
        {
          TEdge _elem15;
          _elem15 = new TEdge();
          _elem15.read(iprot);
          struct.outgoingEdges.add(_elem15);
        }
      }
      struct.set_outgoingEdges_isSet(true);
      struct.serializedPellet = iprot.readBinary();
      struct.set_serializedPellet_isSet(true);
    }
  }

}

