/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.usc.pgroup.floe.thriftgen;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TPellet implements org.apache.thrift.TBase<TPellet, TPellet._Fields>, java.io.Serializable, Cloneable, Comparable<TPellet> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPellet");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField INCOMING_EDGES_FIELD_DESC = new org.apache.thrift.protocol.TField("incomingEdges", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField OUTPUT_STREAM_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("outputStreamNames", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField OUTGOING_EDGES_WITH_SUBSCRIBED_STREAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("outgoingEdgesWithSubscribedStreams", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField ALTERNATES_FIELD_DESC = new org.apache.thrift.protocol.TField("alternates", org.apache.thrift.protocol.TType.MAP, (short)5);
  private static final org.apache.thrift.protocol.TField ACTIVE_ALTERNATE_FIELD_DESC = new org.apache.thrift.protocol.TField("activeAlternate", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PARALLELISM_FIELD_DESC = new org.apache.thrift.protocol.TField("parallelism", org.apache.thrift.protocol.TType.I32, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TPelletStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TPelletTupleSchemeFactory());
  }

  private String id; // required
  private List<TEdge> incomingEdges; // required
  private List<String> outputStreamNames; // required
  private Map<TEdge,List<String>> outgoingEdgesWithSubscribedStreams; // required
  private Map<String,TAlternate> alternates; // required
  private String activeAlternate; // required
  private int parallelism; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    INCOMING_EDGES((short)2, "incomingEdges"),
    OUTPUT_STREAM_NAMES((short)3, "outputStreamNames"),
    OUTGOING_EDGES_WITH_SUBSCRIBED_STREAMS((short)4, "outgoingEdgesWithSubscribedStreams"),
    ALTERNATES((short)5, "alternates"),
    ACTIVE_ALTERNATE((short)6, "activeAlternate"),
    PARALLELISM((short)7, "parallelism");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // INCOMING_EDGES
          return INCOMING_EDGES;
        case 3: // OUTPUT_STREAM_NAMES
          return OUTPUT_STREAM_NAMES;
        case 4: // OUTGOING_EDGES_WITH_SUBSCRIBED_STREAMS
          return OUTGOING_EDGES_WITH_SUBSCRIBED_STREAMS;
        case 5: // ALTERNATES
          return ALTERNATES;
        case 6: // ACTIVE_ALTERNATE
          return ACTIVE_ALTERNATE;
        case 7: // PARALLELISM
          return PARALLELISM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PARALLELISM_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.PARALLELISM};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INCOMING_EDGES, new org.apache.thrift.meta_data.FieldMetaData("incomingEdges", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TEdge.class))));
    tmpMap.put(_Fields.OUTPUT_STREAM_NAMES, new org.apache.thrift.meta_data.FieldMetaData("outputStreamNames", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.OUTGOING_EDGES_WITH_SUBSCRIBED_STREAMS, new org.apache.thrift.meta_data.FieldMetaData("outgoingEdgesWithSubscribedStreams", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TEdge.class), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    tmpMap.put(_Fields.ALTERNATES, new org.apache.thrift.meta_data.FieldMetaData("alternates", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAlternate.class))));
    tmpMap.put(_Fields.ACTIVE_ALTERNATE, new org.apache.thrift.meta_data.FieldMetaData("activeAlternate", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARALLELISM, new org.apache.thrift.meta_data.FieldMetaData("parallelism", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPellet.class, metaDataMap);
  }

  public TPellet() {
  }

  public TPellet(
    String id,
    List<TEdge> incomingEdges,
    List<String> outputStreamNames,
    Map<TEdge,List<String>> outgoingEdgesWithSubscribedStreams,
    Map<String,TAlternate> alternates,
    String activeAlternate)
  {
    this();
    this.id = id;
    this.incomingEdges = incomingEdges;
    this.outputStreamNames = outputStreamNames;
    this.outgoingEdgesWithSubscribedStreams = outgoingEdgesWithSubscribedStreams;
    this.alternates = alternates;
    this.activeAlternate = activeAlternate;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPellet(TPellet other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.is_set_id()) {
      this.id = other.id;
    }
    if (other.is_set_incomingEdges()) {
      List<TEdge> __this__incomingEdges = new ArrayList<TEdge>(other.incomingEdges.size());
      for (TEdge other_element : other.incomingEdges) {
        __this__incomingEdges.add(new TEdge(other_element));
      }
      this.incomingEdges = __this__incomingEdges;
    }
    if (other.is_set_outputStreamNames()) {
      List<String> __this__outputStreamNames = new ArrayList<String>(other.outputStreamNames);
      this.outputStreamNames = __this__outputStreamNames;
    }
    if (other.is_set_outgoingEdgesWithSubscribedStreams()) {
      Map<TEdge,List<String>> __this__outgoingEdgesWithSubscribedStreams = new HashMap<TEdge,List<String>>(other.outgoingEdgesWithSubscribedStreams.size());
      for (Map.Entry<TEdge, List<String>> other_element : other.outgoingEdgesWithSubscribedStreams.entrySet()) {

        TEdge other_element_key = other_element.getKey();
        List<String> other_element_value = other_element.getValue();

        TEdge __this__outgoingEdgesWithSubscribedStreams_copy_key = new TEdge(other_element_key);

        List<String> __this__outgoingEdgesWithSubscribedStreams_copy_value = new ArrayList<String>(other_element_value);

        __this__outgoingEdgesWithSubscribedStreams.put(__this__outgoingEdgesWithSubscribedStreams_copy_key, __this__outgoingEdgesWithSubscribedStreams_copy_value);
      }
      this.outgoingEdgesWithSubscribedStreams = __this__outgoingEdgesWithSubscribedStreams;
    }
    if (other.is_set_alternates()) {
      Map<String,TAlternate> __this__alternates = new HashMap<String,TAlternate>(other.alternates.size());
      for (Map.Entry<String, TAlternate> other_element : other.alternates.entrySet()) {

        String other_element_key = other_element.getKey();
        TAlternate other_element_value = other_element.getValue();

        String __this__alternates_copy_key = other_element_key;

        TAlternate __this__alternates_copy_value = new TAlternate(other_element_value);

        __this__alternates.put(__this__alternates_copy_key, __this__alternates_copy_value);
      }
      this.alternates = __this__alternates;
    }
    if (other.is_set_activeAlternate()) {
      this.activeAlternate = other.activeAlternate;
    }
    this.parallelism = other.parallelism;
  }

  public TPellet deepCopy() {
    return new TPellet(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.incomingEdges = null;
    this.outputStreamNames = null;
    this.outgoingEdgesWithSubscribedStreams = null;
    this.alternates = null;
    this.activeAlternate = null;
    set_parallelism_isSet(false);
    this.parallelism = 0;
  }

  public String get_id() {
    return this.id;
  }

  public void set_id(String id) {
    this.id = id;
  }

  public void unset_id() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean is_set_id() {
    return this.id != null;
  }

  public void set_id_isSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public int get_incomingEdges_size() {
    return (this.incomingEdges == null) ? 0 : this.incomingEdges.size();
  }

  public java.util.Iterator<TEdge> get_incomingEdges_iterator() {
    return (this.incomingEdges == null) ? null : this.incomingEdges.iterator();
  }

  public void add_to_incomingEdges(TEdge elem) {
    if (this.incomingEdges == null) {
      this.incomingEdges = new ArrayList<TEdge>();
    }
    this.incomingEdges.add(elem);
  }

  public List<TEdge> get_incomingEdges() {
    return this.incomingEdges;
  }

  public void set_incomingEdges(List<TEdge> incomingEdges) {
    this.incomingEdges = incomingEdges;
  }

  public void unset_incomingEdges() {
    this.incomingEdges = null;
  }

  /** Returns true if field incomingEdges is set (has been assigned a value) and false otherwise */
  public boolean is_set_incomingEdges() {
    return this.incomingEdges != null;
  }

  public void set_incomingEdges_isSet(boolean value) {
    if (!value) {
      this.incomingEdges = null;
    }
  }

  public int get_outputStreamNames_size() {
    return (this.outputStreamNames == null) ? 0 : this.outputStreamNames.size();
  }

  public java.util.Iterator<String> get_outputStreamNames_iterator() {
    return (this.outputStreamNames == null) ? null : this.outputStreamNames.iterator();
  }

  public void add_to_outputStreamNames(String elem) {
    if (this.outputStreamNames == null) {
      this.outputStreamNames = new ArrayList<String>();
    }
    this.outputStreamNames.add(elem);
  }

  public List<String> get_outputStreamNames() {
    return this.outputStreamNames;
  }

  public void set_outputStreamNames(List<String> outputStreamNames) {
    this.outputStreamNames = outputStreamNames;
  }

  public void unset_outputStreamNames() {
    this.outputStreamNames = null;
  }

  /** Returns true if field outputStreamNames is set (has been assigned a value) and false otherwise */
  public boolean is_set_outputStreamNames() {
    return this.outputStreamNames != null;
  }

  public void set_outputStreamNames_isSet(boolean value) {
    if (!value) {
      this.outputStreamNames = null;
    }
  }

  public int get_outgoingEdgesWithSubscribedStreams_size() {
    return (this.outgoingEdgesWithSubscribedStreams == null) ? 0 : this.outgoingEdgesWithSubscribedStreams.size();
  }

  public void put_to_outgoingEdgesWithSubscribedStreams(TEdge key, List<String> val) {
    if (this.outgoingEdgesWithSubscribedStreams == null) {
      this.outgoingEdgesWithSubscribedStreams = new HashMap<TEdge,List<String>>();
    }
    this.outgoingEdgesWithSubscribedStreams.put(key, val);
  }

  public Map<TEdge,List<String>> get_outgoingEdgesWithSubscribedStreams() {
    return this.outgoingEdgesWithSubscribedStreams;
  }

  public void set_outgoingEdgesWithSubscribedStreams(Map<TEdge,List<String>> outgoingEdgesWithSubscribedStreams) {
    this.outgoingEdgesWithSubscribedStreams = outgoingEdgesWithSubscribedStreams;
  }

  public void unset_outgoingEdgesWithSubscribedStreams() {
    this.outgoingEdgesWithSubscribedStreams = null;
  }

  /** Returns true if field outgoingEdgesWithSubscribedStreams is set (has been assigned a value) and false otherwise */
  public boolean is_set_outgoingEdgesWithSubscribedStreams() {
    return this.outgoingEdgesWithSubscribedStreams != null;
  }

  public void set_outgoingEdgesWithSubscribedStreams_isSet(boolean value) {
    if (!value) {
      this.outgoingEdgesWithSubscribedStreams = null;
    }
  }

  public int get_alternates_size() {
    return (this.alternates == null) ? 0 : this.alternates.size();
  }

  public void put_to_alternates(String key, TAlternate val) {
    if (this.alternates == null) {
      this.alternates = new HashMap<String,TAlternate>();
    }
    this.alternates.put(key, val);
  }

  public Map<String,TAlternate> get_alternates() {
    return this.alternates;
  }

  public void set_alternates(Map<String,TAlternate> alternates) {
    this.alternates = alternates;
  }

  public void unset_alternates() {
    this.alternates = null;
  }

  /** Returns true if field alternates is set (has been assigned a value) and false otherwise */
  public boolean is_set_alternates() {
    return this.alternates != null;
  }

  public void set_alternates_isSet(boolean value) {
    if (!value) {
      this.alternates = null;
    }
  }

  public String get_activeAlternate() {
    return this.activeAlternate;
  }

  public void set_activeAlternate(String activeAlternate) {
    this.activeAlternate = activeAlternate;
  }

  public void unset_activeAlternate() {
    this.activeAlternate = null;
  }

  /** Returns true if field activeAlternate is set (has been assigned a value) and false otherwise */
  public boolean is_set_activeAlternate() {
    return this.activeAlternate != null;
  }

  public void set_activeAlternate_isSet(boolean value) {
    if (!value) {
      this.activeAlternate = null;
    }
  }

  public int get_parallelism() {
    return this.parallelism;
  }

  public void set_parallelism(int parallelism) {
    this.parallelism = parallelism;
    set_parallelism_isSet(true);
  }

  public void unset_parallelism() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARALLELISM_ISSET_ID);
  }

  /** Returns true if field parallelism is set (has been assigned a value) and false otherwise */
  public boolean is_set_parallelism() {
    return EncodingUtils.testBit(__isset_bitfield, __PARALLELISM_ISSET_ID);
  }

  public void set_parallelism_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARALLELISM_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unset_id();
      } else {
        set_id((String)value);
      }
      break;

    case INCOMING_EDGES:
      if (value == null) {
        unset_incomingEdges();
      } else {
        set_incomingEdges((List<TEdge>)value);
      }
      break;

    case OUTPUT_STREAM_NAMES:
      if (value == null) {
        unset_outputStreamNames();
      } else {
        set_outputStreamNames((List<String>)value);
      }
      break;

    case OUTGOING_EDGES_WITH_SUBSCRIBED_STREAMS:
      if (value == null) {
        unset_outgoingEdgesWithSubscribedStreams();
      } else {
        set_outgoingEdgesWithSubscribedStreams((Map<TEdge,List<String>>)value);
      }
      break;

    case ALTERNATES:
      if (value == null) {
        unset_alternates();
      } else {
        set_alternates((Map<String,TAlternate>)value);
      }
      break;

    case ACTIVE_ALTERNATE:
      if (value == null) {
        unset_activeAlternate();
      } else {
        set_activeAlternate((String)value);
      }
      break;

    case PARALLELISM:
      if (value == null) {
        unset_parallelism();
      } else {
        set_parallelism((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return get_id();

    case INCOMING_EDGES:
      return get_incomingEdges();

    case OUTPUT_STREAM_NAMES:
      return get_outputStreamNames();

    case OUTGOING_EDGES_WITH_SUBSCRIBED_STREAMS:
      return get_outgoingEdgesWithSubscribedStreams();

    case ALTERNATES:
      return get_alternates();

    case ACTIVE_ALTERNATE:
      return get_activeAlternate();

    case PARALLELISM:
      return Integer.valueOf(get_parallelism());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return is_set_id();
    case INCOMING_EDGES:
      return is_set_incomingEdges();
    case OUTPUT_STREAM_NAMES:
      return is_set_outputStreamNames();
    case OUTGOING_EDGES_WITH_SUBSCRIBED_STREAMS:
      return is_set_outgoingEdgesWithSubscribedStreams();
    case ALTERNATES:
      return is_set_alternates();
    case ACTIVE_ALTERNATE:
      return is_set_activeAlternate();
    case PARALLELISM:
      return is_set_parallelism();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TPellet)
      return this.equals((TPellet)that);
    return false;
  }

  public boolean equals(TPellet that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.is_set_id();
    boolean that_present_id = true && that.is_set_id();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_incomingEdges = true && this.is_set_incomingEdges();
    boolean that_present_incomingEdges = true && that.is_set_incomingEdges();
    if (this_present_incomingEdges || that_present_incomingEdges) {
      if (!(this_present_incomingEdges && that_present_incomingEdges))
        return false;
      if (!this.incomingEdges.equals(that.incomingEdges))
        return false;
    }

    boolean this_present_outputStreamNames = true && this.is_set_outputStreamNames();
    boolean that_present_outputStreamNames = true && that.is_set_outputStreamNames();
    if (this_present_outputStreamNames || that_present_outputStreamNames) {
      if (!(this_present_outputStreamNames && that_present_outputStreamNames))
        return false;
      if (!this.outputStreamNames.equals(that.outputStreamNames))
        return false;
    }

    boolean this_present_outgoingEdgesWithSubscribedStreams = true && this.is_set_outgoingEdgesWithSubscribedStreams();
    boolean that_present_outgoingEdgesWithSubscribedStreams = true && that.is_set_outgoingEdgesWithSubscribedStreams();
    if (this_present_outgoingEdgesWithSubscribedStreams || that_present_outgoingEdgesWithSubscribedStreams) {
      if (!(this_present_outgoingEdgesWithSubscribedStreams && that_present_outgoingEdgesWithSubscribedStreams))
        return false;
      if (!this.outgoingEdgesWithSubscribedStreams.equals(that.outgoingEdgesWithSubscribedStreams))
        return false;
    }

    boolean this_present_alternates = true && this.is_set_alternates();
    boolean that_present_alternates = true && that.is_set_alternates();
    if (this_present_alternates || that_present_alternates) {
      if (!(this_present_alternates && that_present_alternates))
        return false;
      if (!this.alternates.equals(that.alternates))
        return false;
    }

    boolean this_present_activeAlternate = true && this.is_set_activeAlternate();
    boolean that_present_activeAlternate = true && that.is_set_activeAlternate();
    if (this_present_activeAlternate || that_present_activeAlternate) {
      if (!(this_present_activeAlternate && that_present_activeAlternate))
        return false;
      if (!this.activeAlternate.equals(that.activeAlternate))
        return false;
    }

    boolean this_present_parallelism = true && this.is_set_parallelism();
    boolean that_present_parallelism = true && that.is_set_parallelism();
    if (this_present_parallelism || that_present_parallelism) {
      if (!(this_present_parallelism && that_present_parallelism))
        return false;
      if (this.parallelism != that.parallelism)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_id = true && (is_set_id());
    builder.append(present_id);
    if (present_id)
      builder.append(id);

    boolean present_incomingEdges = true && (is_set_incomingEdges());
    builder.append(present_incomingEdges);
    if (present_incomingEdges)
      builder.append(incomingEdges);

    boolean present_outputStreamNames = true && (is_set_outputStreamNames());
    builder.append(present_outputStreamNames);
    if (present_outputStreamNames)
      builder.append(outputStreamNames);

    boolean present_outgoingEdgesWithSubscribedStreams = true && (is_set_outgoingEdgesWithSubscribedStreams());
    builder.append(present_outgoingEdgesWithSubscribedStreams);
    if (present_outgoingEdgesWithSubscribedStreams)
      builder.append(outgoingEdgesWithSubscribedStreams);

    boolean present_alternates = true && (is_set_alternates());
    builder.append(present_alternates);
    if (present_alternates)
      builder.append(alternates);

    boolean present_activeAlternate = true && (is_set_activeAlternate());
    builder.append(present_activeAlternate);
    if (present_activeAlternate)
      builder.append(activeAlternate);

    boolean present_parallelism = true && (is_set_parallelism());
    builder.append(present_parallelism);
    if (present_parallelism)
      builder.append(parallelism);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(TPellet other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(is_set_id()).compareTo(other.is_set_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_incomingEdges()).compareTo(other.is_set_incomingEdges());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_incomingEdges()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.incomingEdges, other.incomingEdges);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_outputStreamNames()).compareTo(other.is_set_outputStreamNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_outputStreamNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outputStreamNames, other.outputStreamNames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_outgoingEdgesWithSubscribedStreams()).compareTo(other.is_set_outgoingEdgesWithSubscribedStreams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_outgoingEdgesWithSubscribedStreams()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outgoingEdgesWithSubscribedStreams, other.outgoingEdgesWithSubscribedStreams);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_alternates()).compareTo(other.is_set_alternates());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_alternates()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alternates, other.alternates);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_activeAlternate()).compareTo(other.is_set_activeAlternate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_activeAlternate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeAlternate, other.activeAlternate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_parallelism()).compareTo(other.is_set_parallelism());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_parallelism()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parallelism, other.parallelism);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TPellet(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("incomingEdges:");
    if (this.incomingEdges == null) {
      sb.append("null");
    } else {
      sb.append(this.incomingEdges);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("outputStreamNames:");
    if (this.outputStreamNames == null) {
      sb.append("null");
    } else {
      sb.append(this.outputStreamNames);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("outgoingEdgesWithSubscribedStreams:");
    if (this.outgoingEdgesWithSubscribedStreams == null) {
      sb.append("null");
    } else {
      sb.append(this.outgoingEdgesWithSubscribedStreams);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("alternates:");
    if (this.alternates == null) {
      sb.append("null");
    } else {
      sb.append(this.alternates);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("activeAlternate:");
    if (this.activeAlternate == null) {
      sb.append("null");
    } else {
      sb.append(this.activeAlternate);
    }
    first = false;
    if (is_set_parallelism()) {
      if (!first) sb.append(", ");
      sb.append("parallelism:");
      sb.append(this.parallelism);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!is_set_id()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' is unset! Struct:" + toString());
    }

    if (!is_set_incomingEdges()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'incomingEdges' is unset! Struct:" + toString());
    }

    if (!is_set_outputStreamNames()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'outputStreamNames' is unset! Struct:" + toString());
    }

    if (!is_set_outgoingEdgesWithSubscribedStreams()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'outgoingEdgesWithSubscribedStreams' is unset! Struct:" + toString());
    }

    if (!is_set_alternates()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'alternates' is unset! Struct:" + toString());
    }

    if (!is_set_activeAlternate()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'activeAlternate' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPelletStandardSchemeFactory implements SchemeFactory {
    public TPelletStandardScheme getScheme() {
      return new TPelletStandardScheme();
    }
  }

  private static class TPelletStandardScheme extends StandardScheme<TPellet> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TPellet struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.set_id_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INCOMING_EDGES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.incomingEdges = new ArrayList<TEdge>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  TEdge _elem2;
                  _elem2 = new TEdge();
                  _elem2.read(iprot);
                  struct.incomingEdges.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.set_incomingEdges_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OUTPUT_STREAM_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.outputStreamNames = new ArrayList<String>(_list3.size);
                for (int _i4 = 0; _i4 < _list3.size; ++_i4)
                {
                  String _elem5;
                  _elem5 = iprot.readString();
                  struct.outputStreamNames.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.set_outputStreamNames_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OUTGOING_EDGES_WITH_SUBSCRIBED_STREAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map6 = iprot.readMapBegin();
                struct.outgoingEdgesWithSubscribedStreams = new HashMap<TEdge,List<String>>(2*_map6.size);
                for (int _i7 = 0; _i7 < _map6.size; ++_i7)
                {
                  TEdge _key8;
                  List<String> _val9;
                  _key8 = new TEdge();
                  _key8.read(iprot);
                  {
                    org.apache.thrift.protocol.TList _list10 = iprot.readListBegin();
                    _val9 = new ArrayList<String>(_list10.size);
                    for (int _i11 = 0; _i11 < _list10.size; ++_i11)
                    {
                      String _elem12;
                      _elem12 = iprot.readString();
                      _val9.add(_elem12);
                    }
                    iprot.readListEnd();
                  }
                  struct.outgoingEdgesWithSubscribedStreams.put(_key8, _val9);
                }
                iprot.readMapEnd();
              }
              struct.set_outgoingEdgesWithSubscribedStreams_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ALTERNATES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map13 = iprot.readMapBegin();
                struct.alternates = new HashMap<String,TAlternate>(2*_map13.size);
                for (int _i14 = 0; _i14 < _map13.size; ++_i14)
                {
                  String _key15;
                  TAlternate _val16;
                  _key15 = iprot.readString();
                  _val16 = new TAlternate();
                  _val16.read(iprot);
                  struct.alternates.put(_key15, _val16);
                }
                iprot.readMapEnd();
              }
              struct.set_alternates_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ACTIVE_ALTERNATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.activeAlternate = iprot.readString();
              struct.set_activeAlternate_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PARALLELISM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.parallelism = iprot.readI32();
              struct.set_parallelism_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TPellet struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.incomingEdges != null) {
        oprot.writeFieldBegin(INCOMING_EDGES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.incomingEdges.size()));
          for (TEdge _iter17 : struct.incomingEdges)
          {
            _iter17.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.outputStreamNames != null) {
        oprot.writeFieldBegin(OUTPUT_STREAM_NAMES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.outputStreamNames.size()));
          for (String _iter18 : struct.outputStreamNames)
          {
            oprot.writeString(_iter18);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.outgoingEdgesWithSubscribedStreams != null) {
        oprot.writeFieldBegin(OUTGOING_EDGES_WITH_SUBSCRIBED_STREAMS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.LIST, struct.outgoingEdgesWithSubscribedStreams.size()));
          for (Map.Entry<TEdge, List<String>> _iter19 : struct.outgoingEdgesWithSubscribedStreams.entrySet())
          {
            _iter19.getKey().write(oprot);
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter19.getValue().size()));
              for (String _iter20 : _iter19.getValue())
              {
                oprot.writeString(_iter20);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.alternates != null) {
        oprot.writeFieldBegin(ALTERNATES_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.alternates.size()));
          for (Map.Entry<String, TAlternate> _iter21 : struct.alternates.entrySet())
          {
            oprot.writeString(_iter21.getKey());
            _iter21.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.activeAlternate != null) {
        oprot.writeFieldBegin(ACTIVE_ALTERNATE_FIELD_DESC);
        oprot.writeString(struct.activeAlternate);
        oprot.writeFieldEnd();
      }
      if (struct.is_set_parallelism()) {
        oprot.writeFieldBegin(PARALLELISM_FIELD_DESC);
        oprot.writeI32(struct.parallelism);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPelletTupleSchemeFactory implements SchemeFactory {
    public TPelletTupleScheme getScheme() {
      return new TPelletTupleScheme();
    }
  }

  private static class TPelletTupleScheme extends TupleScheme<TPellet> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPellet struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.id);
      {
        oprot.writeI32(struct.incomingEdges.size());
        for (TEdge _iter22 : struct.incomingEdges)
        {
          _iter22.write(oprot);
        }
      }
      {
        oprot.writeI32(struct.outputStreamNames.size());
        for (String _iter23 : struct.outputStreamNames)
        {
          oprot.writeString(_iter23);
        }
      }
      {
        oprot.writeI32(struct.outgoingEdgesWithSubscribedStreams.size());
        for (Map.Entry<TEdge, List<String>> _iter24 : struct.outgoingEdgesWithSubscribedStreams.entrySet())
        {
          _iter24.getKey().write(oprot);
          {
            oprot.writeI32(_iter24.getValue().size());
            for (String _iter25 : _iter24.getValue())
            {
              oprot.writeString(_iter25);
            }
          }
        }
      }
      {
        oprot.writeI32(struct.alternates.size());
        for (Map.Entry<String, TAlternate> _iter26 : struct.alternates.entrySet())
        {
          oprot.writeString(_iter26.getKey());
          _iter26.getValue().write(oprot);
        }
      }
      oprot.writeString(struct.activeAlternate);
      BitSet optionals = new BitSet();
      if (struct.is_set_parallelism()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.is_set_parallelism()) {
        oprot.writeI32(struct.parallelism);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPellet struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.id = iprot.readString();
      struct.set_id_isSet(true);
      {
        org.apache.thrift.protocol.TList _list27 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.incomingEdges = new ArrayList<TEdge>(_list27.size);
        for (int _i28 = 0; _i28 < _list27.size; ++_i28)
        {
          TEdge _elem29;
          _elem29 = new TEdge();
          _elem29.read(iprot);
          struct.incomingEdges.add(_elem29);
        }
      }
      struct.set_incomingEdges_isSet(true);
      {
        org.apache.thrift.protocol.TList _list30 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.outputStreamNames = new ArrayList<String>(_list30.size);
        for (int _i31 = 0; _i31 < _list30.size; ++_i31)
        {
          String _elem32;
          _elem32 = iprot.readString();
          struct.outputStreamNames.add(_elem32);
        }
      }
      struct.set_outputStreamNames_isSet(true);
      {
        org.apache.thrift.protocol.TMap _map33 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRUCT, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
        struct.outgoingEdgesWithSubscribedStreams = new HashMap<TEdge,List<String>>(2*_map33.size);
        for (int _i34 = 0; _i34 < _map33.size; ++_i34)
        {
          TEdge _key35;
          List<String> _val36;
          _key35 = new TEdge();
          _key35.read(iprot);
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            _val36 = new ArrayList<String>(_list37.size);
            for (int _i38 = 0; _i38 < _list37.size; ++_i38)
            {
              String _elem39;
              _elem39 = iprot.readString();
              _val36.add(_elem39);
            }
          }
          struct.outgoingEdgesWithSubscribedStreams.put(_key35, _val36);
        }
      }
      struct.set_outgoingEdgesWithSubscribedStreams_isSet(true);
      {
        org.apache.thrift.protocol.TMap _map40 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.alternates = new HashMap<String,TAlternate>(2*_map40.size);
        for (int _i41 = 0; _i41 < _map40.size; ++_i41)
        {
          String _key42;
          TAlternate _val43;
          _key42 = iprot.readString();
          _val43 = new TAlternate();
          _val43.read(iprot);
          struct.alternates.put(_key42, _val43);
        }
      }
      struct.set_alternates_isSet(true);
      struct.activeAlternate = iprot.readString();
      struct.set_activeAlternate_isSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.parallelism = iprot.readI32();
        struct.set_parallelism_isSet(true);
      }
    }
  }

}

