/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.usc.pgroup.floe.thriftgen;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TAlternate implements org.apache.thrift.TBase<TAlternate, TAlternate._Fields>, java.io.Serializable, Cloneable, Comparable<TAlternate> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TAlternate");

  private static final org.apache.thrift.protocol.TField SERIALIZED_PELLET_FIELD_DESC = new org.apache.thrift.protocol.TField("serializedPellet", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.DOUBLE, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TAlternateStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TAlternateTupleSchemeFactory());
  }

  private ByteBuffer serializedPellet; // required
  private double value; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SERIALIZED_PELLET((short)1, "serializedPellet"),
    VALUE((short)2, "value");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SERIALIZED_PELLET
          return SERIALIZED_PELLET;
        case 2: // VALUE
          return VALUE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VALUE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SERIALIZED_PELLET, new org.apache.thrift.meta_data.FieldMetaData("serializedPellet", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TAlternate.class, metaDataMap);
  }

  public TAlternate() {
  }

  public TAlternate(
    ByteBuffer serializedPellet,
    double value)
  {
    this();
    this.serializedPellet = serializedPellet;
    this.value = value;
    set_value_isSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TAlternate(TAlternate other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.is_set_serializedPellet()) {
      this.serializedPellet = org.apache.thrift.TBaseHelper.copyBinary(other.serializedPellet);
;
    }
    this.value = other.value;
  }

  public TAlternate deepCopy() {
    return new TAlternate(this);
  }

  @Override
  public void clear() {
    this.serializedPellet = null;
    set_value_isSet(false);
    this.value = 0.0;
  }

  public byte[] get_serializedPellet() {
    set_serializedPellet(org.apache.thrift.TBaseHelper.rightSize(serializedPellet));
    return serializedPellet == null ? null : serializedPellet.array();
  }

  public ByteBuffer buffer_for_serializedPellet() {
    return serializedPellet;
  }

  public void set_serializedPellet(byte[] serializedPellet) {
    set_serializedPellet(serializedPellet == null ? (ByteBuffer)null : ByteBuffer.wrap(serializedPellet));
  }

  public void set_serializedPellet(ByteBuffer serializedPellet) {
    this.serializedPellet = serializedPellet;
  }

  public void unset_serializedPellet() {
    this.serializedPellet = null;
  }

  /** Returns true if field serializedPellet is set (has been assigned a value) and false otherwise */
  public boolean is_set_serializedPellet() {
    return this.serializedPellet != null;
  }

  public void set_serializedPellet_isSet(boolean value) {
    if (!value) {
      this.serializedPellet = null;
    }
  }

  public double get_value() {
    return this.value;
  }

  public void set_value(double value) {
    this.value = value;
    set_value_isSet(true);
  }

  public void unset_value() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VALUE_ISSET_ID);
  }

  /** Returns true if field value is set (has been assigned a value) and false otherwise */
  public boolean is_set_value() {
    return EncodingUtils.testBit(__isset_bitfield, __VALUE_ISSET_ID);
  }

  public void set_value_isSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VALUE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SERIALIZED_PELLET:
      if (value == null) {
        unset_serializedPellet();
      } else {
        set_serializedPellet((ByteBuffer)value);
      }
      break;

    case VALUE:
      if (value == null) {
        unset_value();
      } else {
        set_value((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SERIALIZED_PELLET:
      return get_serializedPellet();

    case VALUE:
      return Double.valueOf(get_value());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SERIALIZED_PELLET:
      return is_set_serializedPellet();
    case VALUE:
      return is_set_value();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TAlternate)
      return this.equals((TAlternate)that);
    return false;
  }

  public boolean equals(TAlternate that) {
    if (that == null)
      return false;

    boolean this_present_serializedPellet = true && this.is_set_serializedPellet();
    boolean that_present_serializedPellet = true && that.is_set_serializedPellet();
    if (this_present_serializedPellet || that_present_serializedPellet) {
      if (!(this_present_serializedPellet && that_present_serializedPellet))
        return false;
      if (!this.serializedPellet.equals(that.serializedPellet))
        return false;
    }

    boolean this_present_value = true;
    boolean that_present_value = true;
    if (this_present_value || that_present_value) {
      if (!(this_present_value && that_present_value))
        return false;
      if (this.value != that.value)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_serializedPellet = true && (is_set_serializedPellet());
    builder.append(present_serializedPellet);
    if (present_serializedPellet)
      builder.append(serializedPellet);

    boolean present_value = true;
    builder.append(present_value);
    if (present_value)
      builder.append(value);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(TAlternate other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(is_set_serializedPellet()).compareTo(other.is_set_serializedPellet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_serializedPellet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serializedPellet, other.serializedPellet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_value()).compareTo(other.is_set_value());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_value()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TAlternate(");
    boolean first = true;

    sb.append("serializedPellet:");
    if (this.serializedPellet == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.serializedPellet, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("value:");
    sb.append(this.value);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!is_set_serializedPellet()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'serializedPellet' is unset! Struct:" + toString());
    }

    if (!is_set_value()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'value' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TAlternateStandardSchemeFactory implements SchemeFactory {
    public TAlternateStandardScheme getScheme() {
      return new TAlternateStandardScheme();
    }
  }

  private static class TAlternateStandardScheme extends StandardScheme<TAlternate> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TAlternate struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SERIALIZED_PELLET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serializedPellet = iprot.readBinary();
              struct.set_serializedPellet_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.value = iprot.readDouble();
              struct.set_value_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TAlternate struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.serializedPellet != null) {
        oprot.writeFieldBegin(SERIALIZED_PELLET_FIELD_DESC);
        oprot.writeBinary(struct.serializedPellet);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(VALUE_FIELD_DESC);
      oprot.writeDouble(struct.value);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TAlternateTupleSchemeFactory implements SchemeFactory {
    public TAlternateTupleScheme getScheme() {
      return new TAlternateTupleScheme();
    }
  }

  private static class TAlternateTupleScheme extends TupleScheme<TAlternate> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TAlternate struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeBinary(struct.serializedPellet);
      oprot.writeDouble(struct.value);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TAlternate struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.serializedPellet = iprot.readBinary();
      struct.set_serializedPellet_isSet(true);
      struct.value = iprot.readDouble();
      struct.set_value_isSet(true);
    }
  }

}

