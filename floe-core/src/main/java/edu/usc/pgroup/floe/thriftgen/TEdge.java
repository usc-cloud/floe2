/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.usc.pgroup.floe.thriftgen;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TEdge implements org.apache.thrift.TBase<TEdge, TEdge._Fields>, java.io.Serializable, Cloneable, Comparable<TEdge> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TEdge");

  private static final org.apache.thrift.protocol.TField SRC_PELLET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("srcPelletId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DEST_PELLET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("destPelletId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CHANNEL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("channelType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField CHANNEL_TYPE_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("channelTypeArgs", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TEdgeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TEdgeTupleSchemeFactory());
  }

  private String srcPelletId; // required
  private String destPelletId; // required
  private TChannelType channelType; // required
  private String channelTypeArgs; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SRC_PELLET_ID((short)1, "srcPelletId"),
    DEST_PELLET_ID((short)2, "destPelletId"),
    /**
     * 
     * @see TChannelType
     */
    CHANNEL_TYPE((short)3, "channelType"),
    CHANNEL_TYPE_ARGS((short)4, "channelTypeArgs");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SRC_PELLET_ID
          return SRC_PELLET_ID;
        case 2: // DEST_PELLET_ID
          return DEST_PELLET_ID;
        case 3: // CHANNEL_TYPE
          return CHANNEL_TYPE;
        case 4: // CHANNEL_TYPE_ARGS
          return CHANNEL_TYPE_ARGS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.CHANNEL_TYPE_ARGS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SRC_PELLET_ID, new org.apache.thrift.meta_data.FieldMetaData("srcPelletId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEST_PELLET_ID, new org.apache.thrift.meta_data.FieldMetaData("destPelletId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHANNEL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("channelType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TChannelType.class)));
    tmpMap.put(_Fields.CHANNEL_TYPE_ARGS, new org.apache.thrift.meta_data.FieldMetaData("channelTypeArgs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TEdge.class, metaDataMap);
  }

  public TEdge() {
  }

  public TEdge(
    String srcPelletId,
    String destPelletId,
    TChannelType channelType)
  {
    this();
    this.srcPelletId = srcPelletId;
    this.destPelletId = destPelletId;
    this.channelType = channelType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TEdge(TEdge other) {
    if (other.is_set_srcPelletId()) {
      this.srcPelletId = other.srcPelletId;
    }
    if (other.is_set_destPelletId()) {
      this.destPelletId = other.destPelletId;
    }
    if (other.is_set_channelType()) {
      this.channelType = other.channelType;
    }
    if (other.is_set_channelTypeArgs()) {
      this.channelTypeArgs = other.channelTypeArgs;
    }
  }

  public TEdge deepCopy() {
    return new TEdge(this);
  }

  @Override
  public void clear() {
    this.srcPelletId = null;
    this.destPelletId = null;
    this.channelType = null;
    this.channelTypeArgs = null;
  }

  public String get_srcPelletId() {
    return this.srcPelletId;
  }

  public void set_srcPelletId(String srcPelletId) {
    this.srcPelletId = srcPelletId;
  }

  public void unset_srcPelletId() {
    this.srcPelletId = null;
  }

  /** Returns true if field srcPelletId is set (has been assigned a value) and false otherwise */
  public boolean is_set_srcPelletId() {
    return this.srcPelletId != null;
  }

  public void set_srcPelletId_isSet(boolean value) {
    if (!value) {
      this.srcPelletId = null;
    }
  }

  public String get_destPelletId() {
    return this.destPelletId;
  }

  public void set_destPelletId(String destPelletId) {
    this.destPelletId = destPelletId;
  }

  public void unset_destPelletId() {
    this.destPelletId = null;
  }

  /** Returns true if field destPelletId is set (has been assigned a value) and false otherwise */
  public boolean is_set_destPelletId() {
    return this.destPelletId != null;
  }

  public void set_destPelletId_isSet(boolean value) {
    if (!value) {
      this.destPelletId = null;
    }
  }

  /**
   * 
   * @see TChannelType
   */
  public TChannelType get_channelType() {
    return this.channelType;
  }

  /**
   * 
   * @see TChannelType
   */
  public void set_channelType(TChannelType channelType) {
    this.channelType = channelType;
  }

  public void unset_channelType() {
    this.channelType = null;
  }

  /** Returns true if field channelType is set (has been assigned a value) and false otherwise */
  public boolean is_set_channelType() {
    return this.channelType != null;
  }

  public void set_channelType_isSet(boolean value) {
    if (!value) {
      this.channelType = null;
    }
  }

  public String get_channelTypeArgs() {
    return this.channelTypeArgs;
  }

  public void set_channelTypeArgs(String channelTypeArgs) {
    this.channelTypeArgs = channelTypeArgs;
  }

  public void unset_channelTypeArgs() {
    this.channelTypeArgs = null;
  }

  /** Returns true if field channelTypeArgs is set (has been assigned a value) and false otherwise */
  public boolean is_set_channelTypeArgs() {
    return this.channelTypeArgs != null;
  }

  public void set_channelTypeArgs_isSet(boolean value) {
    if (!value) {
      this.channelTypeArgs = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SRC_PELLET_ID:
      if (value == null) {
        unset_srcPelletId();
      } else {
        set_srcPelletId((String)value);
      }
      break;

    case DEST_PELLET_ID:
      if (value == null) {
        unset_destPelletId();
      } else {
        set_destPelletId((String)value);
      }
      break;

    case CHANNEL_TYPE:
      if (value == null) {
        unset_channelType();
      } else {
        set_channelType((TChannelType)value);
      }
      break;

    case CHANNEL_TYPE_ARGS:
      if (value == null) {
        unset_channelTypeArgs();
      } else {
        set_channelTypeArgs((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SRC_PELLET_ID:
      return get_srcPelletId();

    case DEST_PELLET_ID:
      return get_destPelletId();

    case CHANNEL_TYPE:
      return get_channelType();

    case CHANNEL_TYPE_ARGS:
      return get_channelTypeArgs();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SRC_PELLET_ID:
      return is_set_srcPelletId();
    case DEST_PELLET_ID:
      return is_set_destPelletId();
    case CHANNEL_TYPE:
      return is_set_channelType();
    case CHANNEL_TYPE_ARGS:
      return is_set_channelTypeArgs();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TEdge)
      return this.equals((TEdge)that);
    return false;
  }

  public boolean equals(TEdge that) {
    if (that == null)
      return false;

    boolean this_present_srcPelletId = true && this.is_set_srcPelletId();
    boolean that_present_srcPelletId = true && that.is_set_srcPelletId();
    if (this_present_srcPelletId || that_present_srcPelletId) {
      if (!(this_present_srcPelletId && that_present_srcPelletId))
        return false;
      if (!this.srcPelletId.equals(that.srcPelletId))
        return false;
    }

    boolean this_present_destPelletId = true && this.is_set_destPelletId();
    boolean that_present_destPelletId = true && that.is_set_destPelletId();
    if (this_present_destPelletId || that_present_destPelletId) {
      if (!(this_present_destPelletId && that_present_destPelletId))
        return false;
      if (!this.destPelletId.equals(that.destPelletId))
        return false;
    }

    boolean this_present_channelType = true && this.is_set_channelType();
    boolean that_present_channelType = true && that.is_set_channelType();
    if (this_present_channelType || that_present_channelType) {
      if (!(this_present_channelType && that_present_channelType))
        return false;
      if (!this.channelType.equals(that.channelType))
        return false;
    }

    boolean this_present_channelTypeArgs = true && this.is_set_channelTypeArgs();
    boolean that_present_channelTypeArgs = true && that.is_set_channelTypeArgs();
    if (this_present_channelTypeArgs || that_present_channelTypeArgs) {
      if (!(this_present_channelTypeArgs && that_present_channelTypeArgs))
        return false;
      if (!this.channelTypeArgs.equals(that.channelTypeArgs))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_srcPelletId = true && (is_set_srcPelletId());
    builder.append(present_srcPelletId);
    if (present_srcPelletId)
      builder.append(srcPelletId);

    boolean present_destPelletId = true && (is_set_destPelletId());
    builder.append(present_destPelletId);
    if (present_destPelletId)
      builder.append(destPelletId);

    boolean present_channelType = true && (is_set_channelType());
    builder.append(present_channelType);
    if (present_channelType)
      builder.append(channelType.getValue());

    boolean present_channelTypeArgs = true && (is_set_channelTypeArgs());
    builder.append(present_channelTypeArgs);
    if (present_channelTypeArgs)
      builder.append(channelTypeArgs);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(TEdge other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(is_set_srcPelletId()).compareTo(other.is_set_srcPelletId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_srcPelletId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srcPelletId, other.srcPelletId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_destPelletId()).compareTo(other.is_set_destPelletId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_destPelletId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.destPelletId, other.destPelletId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_channelType()).compareTo(other.is_set_channelType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_channelType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelType, other.channelType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(is_set_channelTypeArgs()).compareTo(other.is_set_channelTypeArgs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_channelTypeArgs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelTypeArgs, other.channelTypeArgs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TEdge(");
    boolean first = true;

    sb.append("srcPelletId:");
    if (this.srcPelletId == null) {
      sb.append("null");
    } else {
      sb.append(this.srcPelletId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("destPelletId:");
    if (this.destPelletId == null) {
      sb.append("null");
    } else {
      sb.append(this.destPelletId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("channelType:");
    if (this.channelType == null) {
      sb.append("null");
    } else {
      sb.append(this.channelType);
    }
    first = false;
    if (is_set_channelTypeArgs()) {
      if (!first) sb.append(", ");
      sb.append("channelTypeArgs:");
      if (this.channelTypeArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.channelTypeArgs);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!is_set_srcPelletId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'srcPelletId' is unset! Struct:" + toString());
    }

    if (!is_set_destPelletId()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'destPelletId' is unset! Struct:" + toString());
    }

    if (!is_set_channelType()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'channelType' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TEdgeStandardSchemeFactory implements SchemeFactory {
    public TEdgeStandardScheme getScheme() {
      return new TEdgeStandardScheme();
    }
  }

  private static class TEdgeStandardScheme extends StandardScheme<TEdge> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TEdge struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SRC_PELLET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.srcPelletId = iprot.readString();
              struct.set_srcPelletId_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DEST_PELLET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.destPelletId = iprot.readString();
              struct.set_destPelletId_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CHANNEL_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.channelType = TChannelType.findByValue(iprot.readI32());
              struct.set_channelType_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CHANNEL_TYPE_ARGS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.channelTypeArgs = iprot.readString();
              struct.set_channelTypeArgs_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TEdge struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.srcPelletId != null) {
        oprot.writeFieldBegin(SRC_PELLET_ID_FIELD_DESC);
        oprot.writeString(struct.srcPelletId);
        oprot.writeFieldEnd();
      }
      if (struct.destPelletId != null) {
        oprot.writeFieldBegin(DEST_PELLET_ID_FIELD_DESC);
        oprot.writeString(struct.destPelletId);
        oprot.writeFieldEnd();
      }
      if (struct.channelType != null) {
        oprot.writeFieldBegin(CHANNEL_TYPE_FIELD_DESC);
        oprot.writeI32(struct.channelType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.channelTypeArgs != null) {
        if (struct.is_set_channelTypeArgs()) {
          oprot.writeFieldBegin(CHANNEL_TYPE_ARGS_FIELD_DESC);
          oprot.writeString(struct.channelTypeArgs);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TEdgeTupleSchemeFactory implements SchemeFactory {
    public TEdgeTupleScheme getScheme() {
      return new TEdgeTupleScheme();
    }
  }

  private static class TEdgeTupleScheme extends TupleScheme<TEdge> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TEdge struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.srcPelletId);
      oprot.writeString(struct.destPelletId);
      oprot.writeI32(struct.channelType.getValue());
      BitSet optionals = new BitSet();
      if (struct.is_set_channelTypeArgs()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.is_set_channelTypeArgs()) {
        oprot.writeString(struct.channelTypeArgs);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TEdge struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.srcPelletId = iprot.readString();
      struct.set_srcPelletId_isSet(true);
      struct.destPelletId = iprot.readString();
      struct.set_destPelletId_isSet(true);
      struct.channelType = TChannelType.findByValue(iprot.readI32());
      struct.set_channelType_isSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.channelTypeArgs = iprot.readString();
        struct.set_channelTypeArgs_isSet(true);
      }
    }
  }

}

